{"name": "{test_name}", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div class=\"Dropdown-root\"> is not clickable at point (683,261) because another element <div class=\"react-datepicker__current-month\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:351:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:175:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:134:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:327:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:210:31", "trace": "self = <tests.test_order.TestOrder object at 0x000002B341D80B90>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"d57e076c-e39c-4ead-a35e-a5d635b89361\")>\norder_data = {'address': 'ул. Пушкина, д. ', 'color': 'black', 'comment': 'Позвонить за час до прибытия', 'date': '25.12.2024', ...}\n\n    @allure.title('{test_name}')\n    @pytest.mark.parametrize('order_data', ORDER_TEST_DATA)\n    def test_order_scooter_positive(self, driver, order_data):\n        main_page = MainPage(driver)\n        order_page = OrderPage(driver)\n    \n        with allure.step('Открыть главную страницу'):\n            main_page.go_to_site()\n    \n        with allure.step(f'Нажать кнопку \"Заказать\" ({order_data[\"order_button\"]})'):\n            if order_data[\"order_button\"] == \"top\":\n                main_page.click_order_button_top()\n            else:\n                main_page.click_order_button_bottom()\n    \n        with allure.step('Заполнить форму личной информации'):\n            order_page.fill_personal_info(\n                order_data[\"name\"],\n                order_data[\"lastname\"],\n                order_data[\"address\"],\n                order_data[\"metro\"],\n                order_data[\"phone\"]\n            )\n    \n        with allure.step('Заполнить форму аренды'):\n>           order_page.fill_rental_info(\n                order_data[\"date\"],\n                order_data[\"rental_period\"],\n                order_data[\"color\"],\n                order_data[\"comment\"]\n            )\n\ntests\\test_order.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\order_page.py:50: in fill_rental_info\n    self.find_element(self.RENTAL_PERIOD_DROPDOWN).click()\nC:\\Users\\Пользователь\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\Пользователь\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\Пользователь\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B342264A50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <div class=\\\\\"Dropdown-root...Element\":\"<div class=\\\\\"Dropdown-root\\\\\">\",\"overlayingElement\":\"<div class=\\\\\"react-datepicker__current-month\\\\\">\"}}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div class=\"Dropdown-root\"> is not clickable at point (683,261) because another element <div class=\"react-datepicker__current-month\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:351:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:175:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:134:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:327:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:210:31\n\nC:\\Users\\Пользователь\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "Открыть главную страницу", "status": "passed", "start": 1757186301085, "stop": 1757186303078}, {"name": "Нажать кнопку \"Заказать\" (top)", "status": "passed", "start": 1757186303078, "stop": 1757186303174}, {"name": "Заполнить форму личной информации", "status": "passed", "start": 1757186303174, "stop": 1757186304139}, {"name": "Заполнить форму аренды", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div class=\"Dropdown-root\"> is not clickable at point (683,261) because another element <div class=\"react-datepicker__current-month\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:351:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:175:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:134:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:327:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:210:31\n\n", "trace": "  File \"C:\\cygwin64\\home\\Пользователь\\Sprint_6\\tests\\test_order.py\", line 66, in test_order_scooter_positive\n    order_page.fill_rental_info(\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n        order_data[\"date\"],\n        ^^^^^^^^^^^^^^^^^^^\n    ...<2 lines>...\n        order_data[\"comment\"]\n        ^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\cygwin64\\home\\Пользователь\\Sprint_6\\pages\\order_page.py\", line 50, in fill_rental_info\n    self.find_element(self.RENTAL_PERIOD_DROPDOWN).click()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\Пользователь\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Пользователь\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Пользователь\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 346, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\Пользователь\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1757186304139, "stop": 1757186304202}], "parameters": [{"name": "order_data", "value": "{'test_name': 'Заказ через верхнюю кнопку - черный самокат', 'order_button': 'top', 'name': 'Евгений', 'lastname': 'Косач', 'address': 'ул. Пушкина, д. ', 'metro': 'Сокольники', 'phone': '+79181234567', 'date': '25.12.2024', 'rental_period': 0, 'color': 'black', 'comment': 'Позвонить за час до прибытия'}"}], "start": 1757186301085, "stop": 1757186304203, "uuid": "22775da7-0077-458d-9eb2-d5940f89df69", "historyId": "f33000827d92bff92b90ee02b7f7574f", "testCaseId": "63ccbe05efd606b09b99871229ee6b5e", "fullName": "tests.test_order.TestOrder#test_order_scooter_positive", "labels": [{"name": "story", "value": "Позитивные сценарии заказа"}, {"name": "feature", "value": "Заказ самоката"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order"}, {"name": "subSuite", "value": "TestOrder"}, {"name": "host", "value": "HOME-PC"}, {"name": "thread", "value": "16268-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order"}], "titlePath": ["tests", "test_order.py", "TestOrder"]}